// <auto-generated/>
#pragma warning disable
using ClubMan.Shared.Model;
using Marten.Internal;
using Marten.Internal.Storage;
using Marten.Schema;
using Marten.Schema.Arguments;
using Npgsql;
using System;
using System.Collections.Generic;
using Weasel.Core;
using Weasel.Postgresql;

namespace Marten.Generated.DocumentStorage
{
    // START: UpsertCarnetOperation739370445
    public class UpsertCarnetOperation739370445 : Marten.Internal.Operations.StorageOperation<ClubMan.Shared.Model.Carnet, string>
    {
        private readonly ClubMan.Shared.Model.Carnet _document;
        private readonly string _id;
        private readonly System.Collections.Generic.Dictionary<string, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;
        private readonly string _tenantId;

        public UpsertCarnetOperation739370445(ClubMan.Shared.Model.Carnet document, string id, System.Collections.Generic.Dictionary<string, System.Guid> versions, Marten.Schema.DocumentMapping mapping, string tenantId) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
            _tenantId = tenantId;
        }


        public const string COMMAND_TEXT = "select public.mt_upsert_carnet(?, ?, ?, ?, ?, ?, ?)";


        public override string CommandText()
        {
            return COMMAND_TEXT;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Text;
        }


        public override void ConfigureParameters(Npgsql.NpgsqlParameter[] parameters, ClubMan.Shared.Model.Carnet document, Marten.Internal.IMartenSession session)
        {
            parameters[0].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Text;

            if (document.Nombre != null)
            {
                parameters[0].Value = document.Nombre;
            }

            else
            {
                parameters[0].Value = System.DBNull.Value;
            }

            parameters[1].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Text;

            if (document.NumeroIdentidad != null)
            {
                parameters[1].Value = document.NumeroIdentidad;
            }

            else
            {
                parameters[1].Value = System.DBNull.Value;
            }

            parameters[2].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            parameters[2].Value = session.Serializer.ToJson(_document);
            // .Net Class Type
            parameters[3].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            parameters[3].Value = _document.GetType().FullName;
            parameters[4].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Text;

            if (document.CarnetId != null)
            {
                parameters[4].Value = document.CarnetId;
            }

            else
            {
                parameters[4].Value = System.DBNull.Value;
            }

            setVersionParameter(parameters[5]);
            parameters[6].Value = _tenantId;
            parameters[6].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
        }


        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            storeVersion();
        }


        public override System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            storeVersion();
            // Nothing
            return System.Threading.Tasks.Task.CompletedTask;
        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Upsert;
        }

    }

    // END: UpsertCarnetOperation739370445
    
    
    // START: InsertCarnetOperation739370445
    public class InsertCarnetOperation739370445 : Marten.Internal.Operations.StorageOperation<ClubMan.Shared.Model.Carnet, string>
    {
        private readonly ClubMan.Shared.Model.Carnet _document;
        private readonly string _id;
        private readonly System.Collections.Generic.Dictionary<string, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;
        private readonly string _tenantId;

        public InsertCarnetOperation739370445(ClubMan.Shared.Model.Carnet document, string id, System.Collections.Generic.Dictionary<string, System.Guid> versions, Marten.Schema.DocumentMapping mapping, string tenantId) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
            _tenantId = tenantId;
        }


        public const string COMMAND_TEXT = "select public.mt_insert_carnet(?, ?, ?, ?, ?, ?, ?)";


        public override string CommandText()
        {
            return COMMAND_TEXT;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Text;
        }


        public override void ConfigureParameters(Npgsql.NpgsqlParameter[] parameters, ClubMan.Shared.Model.Carnet document, Marten.Internal.IMartenSession session)
        {
            parameters[0].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Text;

            if (document.Nombre != null)
            {
                parameters[0].Value = document.Nombre;
            }

            else
            {
                parameters[0].Value = System.DBNull.Value;
            }

            parameters[1].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Text;

            if (document.NumeroIdentidad != null)
            {
                parameters[1].Value = document.NumeroIdentidad;
            }

            else
            {
                parameters[1].Value = System.DBNull.Value;
            }

            parameters[2].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            parameters[2].Value = session.Serializer.ToJson(_document);
            // .Net Class Type
            parameters[3].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            parameters[3].Value = _document.GetType().FullName;
            parameters[4].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Text;

            if (document.CarnetId != null)
            {
                parameters[4].Value = document.CarnetId;
            }

            else
            {
                parameters[4].Value = System.DBNull.Value;
            }

            setVersionParameter(parameters[5]);
            parameters[6].Value = _tenantId;
            parameters[6].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
        }


        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            storeVersion();
        }


        public override System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            storeVersion();
            // Nothing
            return System.Threading.Tasks.Task.CompletedTask;
        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Insert;
        }

    }

    // END: InsertCarnetOperation739370445
    
    
    // START: UpdateCarnetOperation739370445
    public class UpdateCarnetOperation739370445 : Marten.Internal.Operations.StorageOperation<ClubMan.Shared.Model.Carnet, string>
    {
        private readonly ClubMan.Shared.Model.Carnet _document;
        private readonly string _id;
        private readonly System.Collections.Generic.Dictionary<string, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;
        private readonly string _tenantId;

        public UpdateCarnetOperation739370445(ClubMan.Shared.Model.Carnet document, string id, System.Collections.Generic.Dictionary<string, System.Guid> versions, Marten.Schema.DocumentMapping mapping, string tenantId) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
            _tenantId = tenantId;
        }


        public const string COMMAND_TEXT = "select public.mt_update_carnet(?, ?, ?, ?, ?, ?, ?)";


        public override string CommandText()
        {
            return COMMAND_TEXT;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Text;
        }


        public override void ConfigureParameters(Npgsql.NpgsqlParameter[] parameters, ClubMan.Shared.Model.Carnet document, Marten.Internal.IMartenSession session)
        {
            parameters[0].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Text;

            if (document.Nombre != null)
            {
                parameters[0].Value = document.Nombre;
            }

            else
            {
                parameters[0].Value = System.DBNull.Value;
            }

            parameters[1].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Text;

            if (document.NumeroIdentidad != null)
            {
                parameters[1].Value = document.NumeroIdentidad;
            }

            else
            {
                parameters[1].Value = System.DBNull.Value;
            }

            parameters[2].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            parameters[2].Value = session.Serializer.ToJson(_document);
            // .Net Class Type
            parameters[3].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            parameters[3].Value = _document.GetType().FullName;
            parameters[4].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Text;

            if (document.CarnetId != null)
            {
                parameters[4].Value = document.CarnetId;
            }

            else
            {
                parameters[4].Value = System.DBNull.Value;
            }

            setVersionParameter(parameters[5]);
            parameters[6].Value = _tenantId;
            parameters[6].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
        }


        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            storeVersion();
            postprocessUpdate(reader, exceptions);
        }


        public override async System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            storeVersion();
            await postprocessUpdateAsync(reader, exceptions, token);
        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Update;
        }

    }

    // END: UpdateCarnetOperation739370445
    
    
    // START: QueryOnlyCarnetSelector739370445
    public class QueryOnlyCarnetSelector739370445 : Marten.Internal.CodeGeneration.DocumentSelectorWithOnlySerializer, Marten.Linq.Selectors.ISelector<ClubMan.Shared.Model.Carnet>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public QueryOnlyCarnetSelector739370445(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public ClubMan.Shared.Model.Carnet Resolve(System.Data.Common.DbDataReader reader)
        {

            ClubMan.Shared.Model.Carnet document;
            document = _serializer.FromJson<ClubMan.Shared.Model.Carnet>(reader, 0);
            return document;
        }


        public async System.Threading.Tasks.Task<ClubMan.Shared.Model.Carnet> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {

            ClubMan.Shared.Model.Carnet document;
            document = await _serializer.FromJsonAsync<ClubMan.Shared.Model.Carnet>(reader, 0, token).ConfigureAwait(false);
            return document;
        }

    }

    // END: QueryOnlyCarnetSelector739370445
    
    
    // START: LightweightCarnetSelector739370445
    public class LightweightCarnetSelector739370445 : Marten.Internal.CodeGeneration.DocumentSelectorWithVersions<ClubMan.Shared.Model.Carnet, string>, Marten.Linq.Selectors.ISelector<ClubMan.Shared.Model.Carnet>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public LightweightCarnetSelector739370445(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public ClubMan.Shared.Model.Carnet Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<string>(0);

            ClubMan.Shared.Model.Carnet document;
            document = _serializer.FromJson<ClubMan.Shared.Model.Carnet>(reader, 1);
            _session.MarkAsDocumentLoaded(id, document);
            return document;
        }


        public async System.Threading.Tasks.Task<ClubMan.Shared.Model.Carnet> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<string>(0, token);

            ClubMan.Shared.Model.Carnet document;
            document = await _serializer.FromJsonAsync<ClubMan.Shared.Model.Carnet>(reader, 1, token).ConfigureAwait(false);
            _session.MarkAsDocumentLoaded(id, document);
            return document;
        }

    }

    // END: LightweightCarnetSelector739370445
    
    
    // START: IdentityMapCarnetSelector739370445
    public class IdentityMapCarnetSelector739370445 : Marten.Internal.CodeGeneration.DocumentSelectorWithIdentityMap<ClubMan.Shared.Model.Carnet, string>, Marten.Linq.Selectors.ISelector<ClubMan.Shared.Model.Carnet>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public IdentityMapCarnetSelector739370445(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public ClubMan.Shared.Model.Carnet Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<string>(0);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            ClubMan.Shared.Model.Carnet document;
            document = _serializer.FromJson<ClubMan.Shared.Model.Carnet>(reader, 1);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            return document;
        }


        public async System.Threading.Tasks.Task<ClubMan.Shared.Model.Carnet> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<string>(0, token);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            ClubMan.Shared.Model.Carnet document;
            document = await _serializer.FromJsonAsync<ClubMan.Shared.Model.Carnet>(reader, 1, token).ConfigureAwait(false);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            return document;
        }

    }

    // END: IdentityMapCarnetSelector739370445
    
    
    // START: DirtyTrackingCarnetSelector739370445
    public class DirtyTrackingCarnetSelector739370445 : Marten.Internal.CodeGeneration.DocumentSelectorWithDirtyChecking<ClubMan.Shared.Model.Carnet, string>, Marten.Linq.Selectors.ISelector<ClubMan.Shared.Model.Carnet>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public DirtyTrackingCarnetSelector739370445(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public ClubMan.Shared.Model.Carnet Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<string>(0);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            ClubMan.Shared.Model.Carnet document;
            document = _serializer.FromJson<ClubMan.Shared.Model.Carnet>(reader, 1);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            StoreTracker(_session, document);
            return document;
        }


        public async System.Threading.Tasks.Task<ClubMan.Shared.Model.Carnet> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<string>(0, token);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            ClubMan.Shared.Model.Carnet document;
            document = await _serializer.FromJsonAsync<ClubMan.Shared.Model.Carnet>(reader, 1, token).ConfigureAwait(false);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            StoreTracker(_session, document);
            return document;
        }

    }

    // END: DirtyTrackingCarnetSelector739370445
    
    
    // START: QueryOnlyCarnetDocumentStorage739370445
    public class QueryOnlyCarnetDocumentStorage739370445 : Marten.Internal.Storage.QueryOnlyDocumentStorage<ClubMan.Shared.Model.Carnet, string>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public QueryOnlyCarnetDocumentStorage739370445(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override string AssignIdentity(ClubMan.Shared.Model.Carnet document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (string.IsNullOrEmpty(document.CarnetId)) throw new InvalidOperationException("Id/id values cannot be null or empty");
            return document.CarnetId;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(ClubMan.Shared.Model.Carnet document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpdateCarnetOperation739370445
            (
                document, Identity(document),
                session.Versions.ForType<ClubMan.Shared.Model.Carnet, string>(),
                _document
                , tenant
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Insert(ClubMan.Shared.Model.Carnet document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertCarnetOperation739370445
            (
                document, Identity(document),
                session.Versions.ForType<ClubMan.Shared.Model.Carnet, string>(),
                _document
                , tenant
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(ClubMan.Shared.Model.Carnet document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpsertCarnetOperation739370445
            (
                document, Identity(document),
                session.Versions.ForType<ClubMan.Shared.Model.Carnet, string>(),
                _document
                , tenant
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(ClubMan.Shared.Model.Carnet document, Marten.Internal.IMartenSession session, string tenant)
        {
            throw new System.NotSupportedException();
        }


        public override string Identity(ClubMan.Shared.Model.Carnet document)
        {
            return document.CarnetId;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.QueryOnlyCarnetSelector739370445(session, _document);
        }


        public override Npgsql.NpgsqlCommand BuildLoadCommand(string id, string tenant)
        {
            return new NpgsqlCommand(_loaderSql).With("id", id).With(TenantIdArgument.ArgName, tenant);
        }


        public override Npgsql.NpgsqlCommand BuildLoadManyCommand(System.String[] ids, string tenant)
        {
            return new NpgsqlCommand(_loadArraySql).With("ids", ids).With(TenantIdArgument.ArgName, tenant);
        }

    }

    // END: QueryOnlyCarnetDocumentStorage739370445
    
    
    // START: LightweightCarnetDocumentStorage739370445
    public class LightweightCarnetDocumentStorage739370445 : Marten.Internal.Storage.LightweightDocumentStorage<ClubMan.Shared.Model.Carnet, string>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public LightweightCarnetDocumentStorage739370445(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override string AssignIdentity(ClubMan.Shared.Model.Carnet document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (string.IsNullOrEmpty(document.CarnetId)) throw new InvalidOperationException("Id/id values cannot be null or empty");
            return document.CarnetId;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(ClubMan.Shared.Model.Carnet document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpdateCarnetOperation739370445
            (
                document, Identity(document),
                session.Versions.ForType<ClubMan.Shared.Model.Carnet, string>(),
                _document
                , tenant
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Insert(ClubMan.Shared.Model.Carnet document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertCarnetOperation739370445
            (
                document, Identity(document),
                session.Versions.ForType<ClubMan.Shared.Model.Carnet, string>(),
                _document
                , tenant
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(ClubMan.Shared.Model.Carnet document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpsertCarnetOperation739370445
            (
                document, Identity(document),
                session.Versions.ForType<ClubMan.Shared.Model.Carnet, string>(),
                _document
                , tenant
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(ClubMan.Shared.Model.Carnet document, Marten.Internal.IMartenSession session, string tenant)
        {
            throw new System.NotSupportedException();
        }


        public override string Identity(ClubMan.Shared.Model.Carnet document)
        {
            return document.CarnetId;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.LightweightCarnetSelector739370445(session, _document);
        }


        public override Npgsql.NpgsqlCommand BuildLoadCommand(string id, string tenant)
        {
            return new NpgsqlCommand(_loaderSql).With("id", id).With(TenantIdArgument.ArgName, tenant);
        }


        public override Npgsql.NpgsqlCommand BuildLoadManyCommand(System.String[] ids, string tenant)
        {
            return new NpgsqlCommand(_loadArraySql).With("ids", ids).With(TenantIdArgument.ArgName, tenant);
        }

    }

    // END: LightweightCarnetDocumentStorage739370445
    
    
    // START: IdentityMapCarnetDocumentStorage739370445
    public class IdentityMapCarnetDocumentStorage739370445 : Marten.Internal.Storage.IdentityMapDocumentStorage<ClubMan.Shared.Model.Carnet, string>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public IdentityMapCarnetDocumentStorage739370445(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override string AssignIdentity(ClubMan.Shared.Model.Carnet document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (string.IsNullOrEmpty(document.CarnetId)) throw new InvalidOperationException("Id/id values cannot be null or empty");
            return document.CarnetId;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(ClubMan.Shared.Model.Carnet document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpdateCarnetOperation739370445
            (
                document, Identity(document),
                session.Versions.ForType<ClubMan.Shared.Model.Carnet, string>(),
                _document
                , tenant
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Insert(ClubMan.Shared.Model.Carnet document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertCarnetOperation739370445
            (
                document, Identity(document),
                session.Versions.ForType<ClubMan.Shared.Model.Carnet, string>(),
                _document
                , tenant
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(ClubMan.Shared.Model.Carnet document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpsertCarnetOperation739370445
            (
                document, Identity(document),
                session.Versions.ForType<ClubMan.Shared.Model.Carnet, string>(),
                _document
                , tenant
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(ClubMan.Shared.Model.Carnet document, Marten.Internal.IMartenSession session, string tenant)
        {
            throw new System.NotSupportedException();
        }


        public override string Identity(ClubMan.Shared.Model.Carnet document)
        {
            return document.CarnetId;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.IdentityMapCarnetSelector739370445(session, _document);
        }


        public override Npgsql.NpgsqlCommand BuildLoadCommand(string id, string tenant)
        {
            return new NpgsqlCommand(_loaderSql).With("id", id).With(TenantIdArgument.ArgName, tenant);
        }


        public override Npgsql.NpgsqlCommand BuildLoadManyCommand(System.String[] ids, string tenant)
        {
            return new NpgsqlCommand(_loadArraySql).With("ids", ids).With(TenantIdArgument.ArgName, tenant);
        }

    }

    // END: IdentityMapCarnetDocumentStorage739370445
    
    
    // START: DirtyTrackingCarnetDocumentStorage739370445
    public class DirtyTrackingCarnetDocumentStorage739370445 : Marten.Internal.Storage.DirtyCheckedDocumentStorage<ClubMan.Shared.Model.Carnet, string>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public DirtyTrackingCarnetDocumentStorage739370445(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override string AssignIdentity(ClubMan.Shared.Model.Carnet document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (string.IsNullOrEmpty(document.CarnetId)) throw new InvalidOperationException("Id/id values cannot be null or empty");
            return document.CarnetId;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(ClubMan.Shared.Model.Carnet document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpdateCarnetOperation739370445
            (
                document, Identity(document),
                session.Versions.ForType<ClubMan.Shared.Model.Carnet, string>(),
                _document
                , tenant
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Insert(ClubMan.Shared.Model.Carnet document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertCarnetOperation739370445
            (
                document, Identity(document),
                session.Versions.ForType<ClubMan.Shared.Model.Carnet, string>(),
                _document
                , tenant
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(ClubMan.Shared.Model.Carnet document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpsertCarnetOperation739370445
            (
                document, Identity(document),
                session.Versions.ForType<ClubMan.Shared.Model.Carnet, string>(),
                _document
                , tenant
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(ClubMan.Shared.Model.Carnet document, Marten.Internal.IMartenSession session, string tenant)
        {
            throw new System.NotSupportedException();
        }


        public override string Identity(ClubMan.Shared.Model.Carnet document)
        {
            return document.CarnetId;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.DirtyTrackingCarnetSelector739370445(session, _document);
        }


        public override Npgsql.NpgsqlCommand BuildLoadCommand(string id, string tenant)
        {
            return new NpgsqlCommand(_loaderSql).With("id", id).With(TenantIdArgument.ArgName, tenant);
        }


        public override Npgsql.NpgsqlCommand BuildLoadManyCommand(System.String[] ids, string tenant)
        {
            return new NpgsqlCommand(_loadArraySql).With("ids", ids).With(TenantIdArgument.ArgName, tenant);
        }

    }

    // END: DirtyTrackingCarnetDocumentStorage739370445
    
    
    // START: CarnetBulkLoader739370445
    public class CarnetBulkLoader739370445 : Marten.Internal.CodeGeneration.BulkLoader<ClubMan.Shared.Model.Carnet, string>
    {
        private readonly Marten.Internal.Storage.IDocumentStorage<ClubMan.Shared.Model.Carnet, string> _storage;

        public CarnetBulkLoader739370445(Marten.Internal.Storage.IDocumentStorage<ClubMan.Shared.Model.Carnet, string> storage) : base(storage)
        {
            _storage = storage;
        }


        public const string MAIN_LOADER_SQL = "COPY public.mt_doc_carnet(\"nombre\", \"numero_identidad\", \"mt_dotnet_type\", \"id\", \"mt_version\", \"tenant_id\", \"data\") FROM STDIN BINARY";

        public const string TEMP_LOADER_SQL = "COPY mt_doc_carnet_temp(\"nombre\", \"numero_identidad\", \"mt_dotnet_type\", \"id\", \"mt_version\", \"tenant_id\", \"data\") FROM STDIN BINARY";

        public const string COPY_NEW_DOCUMENTS_SQL = "insert into public.mt_doc_carnet (\"id\", \"tenant_id\", \"data\", \"mt_version\", \"mt_dotnet_type\", \"numero_identidad\", \"nombre\", mt_last_modified) (select mt_doc_carnet_temp.\"id\", mt_doc_carnet_temp.\"tenant_id\", mt_doc_carnet_temp.\"data\", mt_doc_carnet_temp.\"mt_version\", mt_doc_carnet_temp.\"mt_dotnet_type\", mt_doc_carnet_temp.\"numero_identidad\", mt_doc_carnet_temp.\"nombre\", transaction_timestamp() from mt_doc_carnet_temp left join public.mt_doc_carnet on mt_doc_carnet_temp.id = public.mt_doc_carnet.id where public.mt_doc_carnet.id is null)";

        public const string OVERWRITE_SQL = "update public.mt_doc_carnet target SET tenant_id = source.tenant_id, data = source.data, mt_version = source.mt_version, mt_dotnet_type = source.mt_dotnet_type, numero_identidad = source.numero_identidad, nombre = source.nombre, mt_last_modified = transaction_timestamp() FROM mt_doc_carnet_temp source WHERE source.id = target.id";

        public const string CREATE_TEMP_TABLE_FOR_COPYING_SQL = "create temporary table mt_doc_carnet_temp as select * from public.mt_doc_carnet limit 0";


        public override void LoadRow(Npgsql.NpgsqlBinaryImporter writer, ClubMan.Shared.Model.Carnet document, Marten.Storage.Tenant tenant, Marten.ISerializer serializer)
        {
            writer.Write(document.Nombre, NpgsqlTypes.NpgsqlDbType.Text);
            writer.Write(document.NumeroIdentidad, NpgsqlTypes.NpgsqlDbType.Text);
            writer.Write(document.GetType().FullName, NpgsqlTypes.NpgsqlDbType.Varchar);
            writer.Write(document.CarnetId, NpgsqlTypes.NpgsqlDbType.Text);
            writer.Write(Marten.Schema.Identity.CombGuidIdGeneration.NewGuid(), NpgsqlTypes.NpgsqlDbType.Uuid);
            writer.Write(tenant.TenantId, NpgsqlTypes.NpgsqlDbType.Varchar);
            writer.Write(serializer.ToJson(document), NpgsqlTypes.NpgsqlDbType.Jsonb);
        }


        public override async System.Threading.Tasks.Task LoadRowAsync(Npgsql.NpgsqlBinaryImporter writer, ClubMan.Shared.Model.Carnet document, Marten.Storage.Tenant tenant, Marten.ISerializer serializer, System.Threading.CancellationToken cancellation)
        {
            await writer.WriteAsync(document.Nombre, NpgsqlTypes.NpgsqlDbType.Text, cancellation);
            await writer.WriteAsync(document.NumeroIdentidad, NpgsqlTypes.NpgsqlDbType.Text, cancellation);
            await writer.WriteAsync(document.GetType().FullName, NpgsqlTypes.NpgsqlDbType.Varchar, cancellation);
            await writer.WriteAsync(document.CarnetId, NpgsqlTypes.NpgsqlDbType.Text, cancellation);
            await writer.WriteAsync(Marten.Schema.Identity.CombGuidIdGeneration.NewGuid(), NpgsqlTypes.NpgsqlDbType.Uuid, cancellation);
            await writer.WriteAsync(tenant.TenantId, NpgsqlTypes.NpgsqlDbType.Varchar, cancellation);
            await writer.WriteAsync(serializer.ToJson(document), NpgsqlTypes.NpgsqlDbType.Jsonb, cancellation);
        }


        public override string MainLoaderSql()
        {
            return MAIN_LOADER_SQL;
        }


        public override string TempLoaderSql()
        {
            return TEMP_LOADER_SQL;
        }


        public override string CreateTempTableForCopying()
        {
            return CREATE_TEMP_TABLE_FOR_COPYING_SQL;
        }


        public override string CopyNewDocumentsFromTempTable()
        {
            return COPY_NEW_DOCUMENTS_SQL;
        }


        public override string OverwriteDuplicatesFromTempTable()
        {
            return OVERWRITE_SQL;
        }

    }

    // END: CarnetBulkLoader739370445
    
    
    // START: CarnetProvider739370445
    public class CarnetProvider739370445 : Marten.Internal.Storage.DocumentProvider<ClubMan.Shared.Model.Carnet>
    {
        private readonly Marten.Schema.DocumentMapping _mapping;

        public CarnetProvider739370445(Marten.Schema.DocumentMapping mapping) : base(new CarnetBulkLoader739370445(new QueryOnlyCarnetDocumentStorage739370445(mapping)), new QueryOnlyCarnetDocumentStorage739370445(mapping), new LightweightCarnetDocumentStorage739370445(mapping), new IdentityMapCarnetDocumentStorage739370445(mapping), new DirtyTrackingCarnetDocumentStorage739370445(mapping))
        {
            _mapping = mapping;
        }


    }

    // END: CarnetProvider739370445
    
    
}

