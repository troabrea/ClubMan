@page "/Aprobaciones"
@using ClubMan.Shared.Events
@inject NavigationManager NavigationManager
@inject INotificationService NotificationService
@inject IApiService ApiService

<ListContent @ref="listContent" IconName="IconName.Inbox" TItem="MovimientoSocio" 
             LoadDataAsync="() => ApiService.GetAprobacionesPendientes(AppState.ClubKey)"
             OnRowClicked="OnRowClicked"
             Title="Aprobaciones Pendientes">
    <Columns>
        <GridColumn Field="FechaRegistro" Width="120px" HeaderText="Fecha" Format="dd-MMM-yyyy"></GridColumn>
        <GridColumn Field="Nota" HeaderText="Nota"  />
        <GridColumn Field="Estatus" Width="120px" HeaderText="Estatus"></GridColumn>
    </Columns>
</ListContent>

<Modal RenderMode="ModalRenderMode.LazyReload" @ref="reviewDialog" ShowBackdrop="true" Closed="() => {_movimiento = new(); _socioId = -1; StateHasChanged(); }" >
    <ModalContent Size="ModalSize.ExtraLarge">
        <ModalHeader>
            <Row Width="Width.Is100" >
                <Row>
                    
                    <Heading Size="HeadingSize.Is6">@_title</Heading>    
                    @* <CloseButton Margin="Margin.Is3.FromStart.Is1.FromTop.Is1.FromBottom" VerticalAlignment="VerticalAlignment.Middle"/> *@
                    
                </Row>
                <Row >
                    
                        <Addons Width="Width.Max100">
                            <Addon AddonType="AddonType.Start">
                                <Button Color="Color.Success" Clicked="DoApproveMovimiento">Aprobar</Button>
                            </Addon>
                        
                            <Addon AddonType="AddonType.Body">
                                <TextEdit Placeholder="Comentario" @bind-Text="_comentario"/>
                            </Addon>
                        
                            <Addon AddonType="AddonType.End">
                                <Button Color="Color.Danger" Clicked="DoRejectMovimiento">Rechazar</Button>
                            </Addon>
                            <Addon AddonType="AddonType.End">
                                <Button Color="Color.Link"><CloseButton VerticalAlignment="VerticalAlignment.Middle"/></Button>
                            </Addon>
                        </Addons>
                </Row>
            </Row>
        </ModalHeader>
        <ModalBody>
            @{
                var tab = "adicionales";
                @if (_movimiento.TipoMovimiento == TipoMovimiento.AgregarDependiente || _movimiento.TipoMovimiento == TipoMovimiento.QuitarDependiente)
                {
                    tab = "dependientes";
                } else if (_movimiento.TipoMovimiento == TipoMovimiento.SolicitarActividad)
                {
                    tab = "eventos";
                } else if (_movimiento.TipoMovimiento == TipoMovimiento.SolicitarHuesped || _movimiento.TipoMovimiento == TipoMovimiento.QuitarHuesped)
                {
                    tab = "huespedes";
                }
            }
            @if (_movimiento.ReferenciaId != null && _socioId > 0)
            {
                <PerfilSocio SocioId="_socioId" SelectedTab="@tab"></PerfilSocio>    
            }
            else
            {
                <EmptyView/>
            }
        </ModalBody>
    </ModalContent>
</Modal>

@code
{
    Modal reviewDialog;
    long _socioId = -1;
    string _title;
    string _comentario;

    ListContent<MovimientoSocio> listContent;
    
    MovimientoSocio _movimiento = new();
    
    [CascadingParameter] 
    public AppState AppState { get; set; }
    private void OnRowClicked(MovimientoSocio mov)
    {
        _socioId = mov.SocioId;
        _movimiento = mov with{};
        _comentario = string.Empty;
        _title = mov.Nota;
        StateHasChanged();
        reviewDialog.Show();
        
    }

    private async Task DoApproveMovimiento()
    {
        if (isBusy) return;
        try
        {
            isBusy = true;
            var evento = new ProcesaMovimientoEvent(_movimiento.Id, AppState.UserName, EstatusMovimiento.Aprobado, _comentario);
            await ApiService.ProcesaMovimento(AppState.ClubKey, evento);
    //
            NotificationService.Success("Aprobación de solicitud grabado exitosamente.", "Alerta");
            reviewDialog.Hide();
            StateHasChanged();
            listContent.ReloadData();

        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            NotificationService.Error("Ha ocurrido un error actualizando la aprobación.", "Alerta");
        }
        finally
        {
            isBusy = true;
        }
    }

    bool isBusy;
    private async Task DoRejectMovimiento()
    {
        if (String.IsNullOrEmpty(_comentario))
        {
            await NotificationService.Warning("Debe especificar un comentario para poder rechazar este movimiento.", "Aviso");
            return;
        }
        if (isBusy) return;
        try
        {
            isBusy = true;
            var evento = new ProcesaMovimientoEvent(_movimiento.Id, AppState.UserName, EstatusMovimiento.Rechazado, _comentario);
            await ApiService.ProcesaMovimento(AppState.ClubKey, evento);
            //
            NotificationService.Success("Rechazo de solicitud grabado exitosamente.", "Alerta");
            reviewDialog.Hide();
            StateHasChanged();
            listContent.ReloadData();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            NotificationService.Error("Ha ocurrido un error actualizando la aprobación.", "Alerta");
        }
        finally
        {
            isBusy = true;
        }
    }
}
