@inject IApiService ApiService
@inject IMessageService MessageService
@inject INotificationService NotificationService

<DataGrid TItem="AdicionalSocio" Data="@Socio.Adicionales"
          CommandMode="DataGridCommandMode.ButtonRow"
          Filterable="false"
          FilterMethod="DataGridFilterMethod.Contains"
          ShowPager="true"
          ShowPageSizes="false"
          RowClicked="AdicionalClicked"
          PageSize="10"
          RowSelectable="(r) => false">
    <DataGridColumns>
        <DataGridColumn Field="Id" Caption="Id" SortDirection="Blazorise.SortDirection.Ascending"/>
        <DataGridColumn Field="TipoAdicional" Caption="Tipo"/>
        <DataGridColumn Field="Descripcion" Caption="Descripción"/>
        <DataGridColumn Field="Nombre" Caption="Nombre"/>
        <DataGridColumn Field="NumeroIdentidad" Caption="Indentidad"/>
        <DataGridColumn Field="Estatus" Caption="Estatus"/>
    </DataGridColumns>
    <ButtonRowTemplate>
        <Button Color="Color.Primary" Margin="Margin.Is1.FromTop" Border="Blazorise.Border.RoundedCircle" Outline="false" Clicked="DoShowAdd">
            <Icon Name="IconName.Add" TextColor="TextColor.White"/>
        </Button>
    </ButtonRowTemplate>
</DataGrid>

<Modal @ref="editDialog">
    <ModalContent Centered>
        <ModalHeader>
            <ModalTitle>@(isCreating ? "Nuevo Adicional" : "Editando Adicional")</ModalTitle>
            <CloseButton Clicked="DoRevertEdit"/>
        </ModalHeader>
        <ModalBody>
            <Validations @ref="editValidator" Mode="ValidationMode.Manual">
                <Row>
                    @* <Column ColumnSize="ColumnSize.Is2"> *@
                    @*     <FigureImage Style="height: 100px;width: 100px" Source="@(String.IsNullOrEmpty(_editRow.FotoUrl) ? "/nophoto.jpg" : _editRow.FotoUrl)"/> *@
                    @* </Column> *@
                    <Column ColumnSize="ColumnSize.Is12">
                        <Fields Margin="Margin.Is1.FromTop">
                            <Field Horizontal ColumnSize="ColumnSize.Is12">
                                <FieldLabel ColumnSize="ColumnSize.Is3">Tipo</FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.Is9">
                                    <RadioGroup TValue="TipoAdicional" @bind-CheckedValue="_editRow.TipoAdicional" Inline="true">
                                        <Radio Disabled="_isReadOnly" ReadOnly="_isReadOnly" Value="@(TipoAdicional.Empleado)">Empleado</Radio>
                                        <Radio Disabled="_isReadOnly" ReadOnly="_isReadOnly" Value="@(TipoAdicional.Otro)">Otro</Radio>
                                    </RadioGroup>
                                </FieldBody>
                            </Field>
                            <Validation Validator="ValidationRule.IsNotEmpty">
                                <Field Horizontal ColumnSize="ColumnSize.Is12">
                                    <FieldLabel ColumnSize="ColumnSize.Is3">Nombre</FieldLabel>
                                    <FieldBody ColumnSize="ColumnSize.Is9">
                                        <TextEdit ReadOnly="_isReadOnly" @bind-Text="_editRow.Nombre"></TextEdit>
                                    </FieldBody>
                                </Field>
                            </Validation>
                            <Validation Validator="ValidationRule.IsNotEmpty">
                                <Field Horizontal ColumnSize="ColumnSize.Is12">
                                    <FieldLabel ColumnSize="ColumnSize.Is3" >Cédula / Pasaporte</FieldLabel>
                                    <FieldBody ColumnSize="ColumnSize.Is9">
                                        <TextEdit ReadOnly="_isReadOnly" @bind-Text="_editRow.NumeroIdentidad"></TextEdit>
                                    </FieldBody>
                                </Field>
                            </Validation>
                        </Fields>
                    </Column>
                </Row>
                <Validation Validator="ValidationRule.IsNotEmpty">
                    <Field Horizontal ColumnSize="ColumnSize.Is12">
                        <FieldLabel ColumnSize="ColumnSize.Is3">Descripción</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is9">
                            <TextEdit ReadOnly="_isReadOnly"  @bind-Text="_editRow.Descripcion"></TextEdit>
                        </FieldBody>
                    </Field>
                </Validation>
                
                
                <Field Horizontal ColumnSize="ColumnSize.Is12">
                    <FieldLabel ColumnSize="ColumnSize.Is3" >Comentarios</FieldLabel>
                    <FieldBody ColumnSize="ColumnSize.Is9">
                        <MemoEdit ReadOnly="_isReadOnly" @bind-Text="_editRow.Observaciones"></MemoEdit>
                    </FieldBody>
                </Field>
            </Validations>
        </ModalBody>
        <ModalFooter >
            @if (!isCreating)
            {
                <Button Float="Float.Start" Outline="true" TextColor="TextColor.Danger" Loading="@_isBusy" Clicked="@DoDelete">Borrar Registro</Button>
            }
            <Button Float="Float.End" Color="Color.Primary" Loading="@_isBusy" Clicked="@DoSaveEdit">Guardar Cambios</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {

    Modal editDialog;
    bool isCreating;
    bool _isBusy;
    bool _isReadOnly;
    Validations editValidator;
    
    AdicionalSocio _editRow = new();
    
    [Parameter] public Action<Socio> OnSocioChanged { get; set; }
    
    [CascadingParameter] public AppState AppState { get; set; }
    [Parameter]
    public Socio Socio { get; set; }

    void DoShowAdd()
    {
        _isReadOnly = false;
        isCreating = true;
        _editRow = new AdicionalSocio();
        editDialog.Show();
    }

    protected override void OnParametersSet()
    {
        StateHasChanged();
        base.OnParametersSet();
    }

    async Task DoSaveEdit()
    {
        if (_isBusy) return;
        
        if (!await editValidator.ValidateAll())
        {
            return;
        }

        await editValidator.ClearAll();
        
        try
        {
            _isBusy = true;
            Socio = await ApiService.UpsertSocioAdicional(AppState, Socio.Id, _editRow);
            StateHasChanged();
            OnSocioChanged?.Invoke(Socio);
            editDialog.Hide();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            NotificationService.Error("Ha ocurrido un error actualizando registro, favor revisar e intentar nuevamente.", "Alerta");
        }
        finally
        {
            _isBusy = false;
        }
        
        
    }
    
    async Task DoDelete()
    {
        editDialog.Hide();
        if ( !await MessageService.Confirm( "Seguro que desea borrar esta persona adicional de este socio?", "Confirme" ) )
        {
            return;
        }
        
        try
        {
            _isBusy = true;
            Socio = await ApiService.DeleteAdicional(AppState.ClubKey, Socio.Id, _editRow.Id);
            StateHasChanged();
            OnSocioChanged?.Invoke(Socio);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            NotificationService.Error("Ha ocurrido un error borrando registro, favor revisar e intentar nuevamente.", "Alerta");
        }
        finally
        {
            _isBusy = false;
        }
        
    }
    
    Task DoRevertEdit()
    {
        editDialog.Hide();
        return Task.CompletedTask;
    }

    private async Task AdicionalClicked(DataGridRowMouseEventArgs<AdicionalSocio> arg)
    {
        _editRow = arg.Item with {};
        if (_editRow.Estatus == EstatusMovimiento.Aprobado)
        {
            if (await MessageService.Confirm("Este registro esta 'Aprobado', desea solicitar la cancelación de esta aprobación?", "Confirme"))
            {
                Socio = await ApiService.DeActivateSocioAdicional(AppState, Socio.Id, _editRow);
                StateHasChanged();
                OnSocioChanged?.Invoke(Socio);
            }
        } else if (_editRow.Estatus == EstatusMovimiento.Rechazado)
        {
            if (await MessageService.Confirm("Este registro esta 'Rechazado', desea someter el regitro nuevamente para  aprobación?", "Confirme"))
            {
                Socio = await ApiService.ReActivateSocioAdicional(AppState, Socio.Id, _editRow);
                StateHasChanged();
                OnSocioChanged?.Invoke(Socio);
            }
        }
        else
        {
            _isReadOnly = (_editRow.Estatus != EstatusMovimiento.Pendiente);
            await editDialog.Show();
        }  
    }

}