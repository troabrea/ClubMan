@inject IApiService ApiService
@inject IMessageService MessageService
@if(Solicitud != null && Solicitud.Dependientes.Any()) {
    <Container Margin="Margin.Is2">
        @foreach (var dep in Solicitud.Dependientes)
        {
            <Card Margin="Margin.Is3.FromTop" Padding="Padding.Is3">
                <Row>
                    <Column ColumnSize="ColumnSize.Is2">
                        <Button Clicked="() => OnPickPhoto(dep.Id)">
                            <FigureImage Style="height: 100px;width: 100px" Source="@(String.IsNullOrEmpty(dep.FotoUrl) ? "/nophoto.jpg" : dep.FotoUrl)"/>
                        </Button>
                    </Column>
                    <Column ColumnSize="ColumnSize.Is10">
                        <Fields Margin="Margin.Is1.FromTop">
                            <Field Horizontal ColumnSize="ColumnSize.Is11">
                                <FieldLabel ColumnSize="ColumnSize.Is3">Tipo Dependiente</FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.Is9">
                                    <RadioGroup Disabled="false" TValue="TipoDependiente" @bind-CheckedValue="dep.TipoDependiente" Inline="true">
                                        <Radio Disabled="false" ReadOnly="false" Value="@(TipoDependiente.Conyuge)">Conyuge</Radio>
                                        <Radio Disabled="false" Value="@(TipoDependiente.Hijo)">Hijo(a)</Radio>
                                    </RadioGroup>
                                </FieldBody>
                            </Field>
                            <Field Horizontal Float="Float.End" ColumnSize="ColumnSize.Is1">
                                <FieldBody>
                                    <Button Color="Color.Danger" Clicked="async () => await DoDelete(dep)">
                                        <Icon Name="IconName.Delete"/>
                                    </Button>
                                </FieldBody>
                            </Field>
                            <Field Horizontal ColumnSize="ColumnSize.Is12">
                                <FieldLabel ColumnSize="ColumnSize.Is3">Nombre</FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.Is9">
                                    <TextEdit ReadOnly="false" @bind-Text="dep.Nombre"></TextEdit>
                                </FieldBody>
                            </Field>
                            <Field Horizontal ColumnSize="ColumnSize.Is12">
                                <FieldLabel ColumnSize="ColumnSize.Is3" >Cédula / Pasaporte</FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.Is9">
                                    <TextEdit ReadOnly="false" @bind-Text="dep.NumeroIndentidad"></TextEdit>
                                </FieldBody>
                            </Field>
                        </Fields>
                    </Column>
                </Row>
                <Fields Margin="Margin.Is1.FromTop">
                    <Field Horizontal ColumnSize="ColumnSize.Is4">
                        <FieldLabel ColumnSize="ColumnSize.Is4">Nacimiento</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is8">
                            <DatePicker ReadOnly="false" DisplayFormat="dd-MMM-yyyy" @bind-Date="dep.FechaNacimiento"/>
                        </FieldBody>
                    </Field>

                    <Field Horizontal ColumnSize="ColumnSize.Is3">
                        <FieldLabel ColumnSize="ColumnSize.Is4">Edad</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is8">
                            <NumericEdit ReadOnly="false" Value="dep.Edad"/>
                        </FieldBody>
                    </Field>

                    <Field Horizontal ColumnSize="ColumnSize.Is5">
                        <FieldLabel ColumnSize="ColumnSize.Is4">Nacionalidad</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is8">
                            <TextEdit ReadOnly="false" @bind-Text="dep.Nacionalidad"/>
                        </FieldBody>
                    </Field>

                </Fields>
                <Fields Margin="Margin.Is1.FromTop">
                    <Field Horizontal ColumnSize="ColumnSize.Is4">
                        <FieldLabel ColumnSize="ColumnSize.Is4">Sexo</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is8">
                            <RadioGroup Disabled="false" TValue="Sexo" @bind-CheckedValue="dep.Sexo" Inline="true">
                                <Radio Disabled="false" ReadOnly="false" Value="@(Sexo.Masculino)">M</Radio>
                                <Radio Disabled="false" Value="@(Sexo.Femenino)">F</Radio>
                            </RadioGroup>
                        </FieldBody>
                    </Field>

                    <Field Horizontal ColumnSize="ColumnSize.Is4">
                        <FieldLabel ColumnSize="ColumnSize.Is3">Celular</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is9">
                            <TextEdit ReadOnly="false" @bind-Text="dep.Celular"/>
                        </FieldBody>
                    </Field>
                    <Field Horizontal ColumnSize="ColumnSize.Is4">
                        <FieldLabel ColumnSize="ColumnSize.Is3">Email</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is9">
                            <TextEdit ReadOnly="false" @bind-Text="dep.Email"/>
                        </FieldBody>
                    </Field>
                </Fields>
                @if (dep.TipoDependiente == TipoDependiente.Conyuge)
                {
                    <Divider DividerType="DividerType.TextContent" Text="Información Laboral"/>
                    <Fields Margin="Margin.Is1.FromTop">
                        <Field Horizontal ColumnSize="ColumnSize.Is8">
                            <FieldLabel ColumnSize="ColumnSize.Is3">Lugar de Trabajo</FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.Is9"><TextEdit ReadOnly="false" @bind-Text="dep.LugarTrabajo"/></FieldBody>
                        </Field>
                        <Field Horizontal ColumnSize="ColumnSize.Is4">
                            <FieldLabel ColumnSize="ColumnSize.Is3">Cargo</FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.Is9"><TextEdit ReadOnly="false" @bind-Text="dep.Posicion"/></FieldBody>
                        </Field>
                    </Fields>
                    <Fields Margin="Margin.Is1.FromTop">
                        <Field Horizontal ColumnSize="ColumnSize.Is8">
                            <FieldLabel ColumnSize="ColumnSize.Is3">Dirección Of.</FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.Is9"><TextEdit ReadOnly="false" @bind-Text="dep.DireccionTrabajo"/></FieldBody>
                        </Field>
                        <Field Horizontal ColumnSize="ColumnSize.Is4">
                            <FieldLabel ColumnSize="ColumnSize.Is5">Teléfono Of.</FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.Is7"><TextEdit ReadOnly="false" @bind-Text="dep.TelefonoTrabajo"/></FieldBody>
                        </Field>
                    </Fields>
                }
            </Card>
        }
    </Container>
}
else
{
    <EmptyView/>
}

<Button Color="Color.Primary" Margin="Margin.Is1.FromTop" Border="Blazorise.Border.RoundedCircle" Outline="false" Clicked="DoShowAdd">
    <Icon Name="IconName.Add" TextColor="TextColor.White"/>
</Button>

<PhotoPicker @ref="_photoPicker" Title="Foto Dependiente"></PhotoPicker>

@code {

    [CascadingParameter] public AppState AppState { get; set; }
    [Parameter]
    public Solicitud Solicitud { get; set; }
    PhotoPicker _photoPicker;
    private void OnPickPhoto(Guid dependienteId)
    {
        _photoPicker.Show(async (url) =>
        {
            Solicitud = await ApiService.UpdateSolicitudDependientePhoto(AppState, Solicitud.Id, dependienteId, url);
            StateHasChanged();
        });
    }
    
    private void DoShowAdd()
    {
        Solicitud.Dependientes.Add(new Dependiente());
    }

    private async Task DoDelete(Dependiente dependiente)
    {
        if ( !await MessageService.Confirm( "Seguro que desea borrar esta persona adicional de este socio?", "Confirme" ) )
        {
            return;
        }
        Solicitud.Dependientes.Remove(dependiente);
    }

}