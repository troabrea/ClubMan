@using Border = Syncfusion.Blazor.Grids.Border
@inject IMessageService MessageService
@inject NavigationManager NavigationManager
@inject INotificationService NotificationService
@inject IApiService ApiService;
@inject IJSRuntime jsRuntime

@if (_solicitud != null)
{
<DetailContent Title="@_title" IconName="IconName.Inbox" LoadDataAsync="DoLoadSolicitudAsync">
    <ToolbarItems>
        @if(_solicitud != null) {
            <Bar Mode="BarMode.Horizontal" Breakpoint="Breakpoint.Widescreen">
                <BarMenu >
                    <BarEnd>
                        <BarItem>
                            <Button Outline="true" Clicked="DoOpenPdf">Ver PDF</Button>
                        </BarItem>
                    </BarEnd>
                </BarMenu>
            </Bar>
            
        }
    </ToolbarItems>
    <ChildContent>
        <SolicitudEncabezado Solicitud="_solicitud"/>
        <Tabs Margin="Margin.Is1.FromTop" @bind-SelectedTab="_selectedTab">
            <Items>
                <Tab Name="socio">Informaci√≥n del Socio</Tab>
                <Tab Name="dependientes">
                    Dependientes
                    <Badge Color="Color.Primary" Pill>@_solicitud.Dependientes.Count</Badge>
                </Tab>
                <Tab Name="referencias">
                    Referencias
                    <Badge Color="Color.Primary" Pill>@_solicitud.ReferenciasBancarias.Count</Badge>
                </Tab>
                <Tab Name="embarcaciones">
                    Embarcaciones
                    <Badge Color="Color.Primary" Pill>@_solicitud.Embarcaciones.Count</Badge>
                </Tab>
                <Tab Name="secundadores">
                    Secundado Por
                    <Badge Color="Color.Primary" Pill>@_solicitud.SociosSecundadores.Count</Badge>
                </Tab>
                <Tab Name="otros">
                    Otras Membresias
                    <Badge Color="Color.Primary" Pill>@_solicitud.MembresiasAlternas.Count</Badge>
                </Tab>
                
                @if (_solicitud.EstatusSolicitud != EstatusSolicitud.Recibida)
                {
                    <Tab Name="revisiones">
                        Revisiones
                        <Badge Color="Color.Warning" Pill>@_solicitud.Revisiones.Count</Badge>
                    </Tab>
                }
            </Items>
            <Content>
                <TabPanel Name="socio">
                    <SolicitudDatosSocio Solicitud="_solicitud"/>
                </TabPanel>
                <TabPanel Name="dependientes">
                    <SolicitudDependientes Solicitud="_solicitud"/>
                </TabPanel>
                <TabPanel Name="referencias">
                    <SolicitudReferencias Solicitud="_solicitud"/>
                </TabPanel>
                <TabPanel Name="embarcaciones">
                    <SolicitudEmbarcaciones Solicitud="_solicitud"/>
                </TabPanel>
                <TabPanel Name="secundadores">
                    <SolicitudSecundadores Solicitud="_solicitud"/>
                </TabPanel>
                <TabPanel Name="otros">
                    <SolicitudOtrasMembresias Solicitud="_solicitud"/>
                </TabPanel>
                @if (_solicitud.EstatusSolicitud != EstatusSolicitud.Recibida)
                {
                    <TabPanel Name="revisiones">
                        <SolicitudRevisiones Solicitud="_solicitud"/>
                    </TabPanel>
                }
            </Content>
        </Tabs>
    </ChildContent>
</DetailContent>

<SolicitudReviewResult @ref="_reviewDialog"></SolicitudReviewResult>
}


@code {

    SolicitudReviewResult _reviewDialog;

    Modal _pdfViewer;
    
    string _selectedTab = "socio";
    string _title = "Detalle Solicitud";
    
    [CascadingParameter] public AppState AppState { get; set; }
    [Parameter] public long SolicitudId { get; set; }
    Solicitud _solicitud;

    protected override async Task OnParametersSetAsync()
    {
        if (SolicitudId > 0 && _solicitud == null)
        {
            await DoLoadSolicitudAsync();
        }
    }

    private async Task DoLoadSolicitudAsync()
    {
        if (SolicitudId > 0)
        {
            _solicitud = await ApiService.GetSolicitud(AppState.ClubKey, SolicitudId);
            _title = $"Detalle Solicitud - {_solicitud.Id} - {_solicitud.EstatusSolicitud}";
            StateHasChanged();
        }
    }

    private bool isBusy;

    private async Task DoOpenPdf()
    {
        string url = _solicitud.SolicitudPdfUrl;
        await jsRuntime.InvokeAsync<object>("open", url, "_blank");
    }

    

    

}