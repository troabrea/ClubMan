@page "/DetalleSolicitud/{SolicitudId:long}"
@using Border = Syncfusion.Blazor.Grids.Border
@inject IMessageService MessageService
@inject NavigationManager NavigationManager
@inject INotificationService NotificationService
@inject IApiService ApiService;
@inject IJSRuntime jsRuntime

<DetailContent Title="@_title" IconName="IconName.Inbox" LoadDataAsync="DoLoadSolicitudAsync">
    <ToolbarItems>
        @if(_solicitud != null) {
            <Bar Mode="BarMode.Horizontal" Breakpoint="Breakpoint.Widescreen">
                <BarMenu >
                    <BarEnd>
                        <BarItem>
                            <Button Outline="true" Clicked="DoOpenPdf">Ver PDF</Button>
                        </BarItem>

                        @if (_solicitud.EstatusSolicitud == EstatusSolicitud.Recibida || _solicitud.EstatusSolicitud == EstatusSolicitud.Pospuesto)
                        {
                            <BarItem>
                                <Button Clicked="DoSaveChanges" Loading="@isBusy" Border="Blazorise.Border.Info" Outline="true">
                                    Guardar Cambios <Icon Name="IconName.Save"></Icon>
                                </Button>
                            </BarItem>
                            <BarItem>
                                <Button Clicked="DoSubmitForReview" Loading="@isBusy" Border="Blazorise.Border.Info" Outline="true">Someter <Icon Name="IconName.Forward"></Icon></Button>
                            </BarItem>
                        }
                        else if(_solicitud.EstatusSolicitud == EstatusSolicitud.Sometida)
                        {
                            <BarItem>
                                <Button Clicked="DoRejectReview" Loading="@isBusy" Border="Blazorise.Border.Danger" Outline="true">Rechazar <Icon Name="IconName.Delete"></Icon></Button>
                            </BarItem>
                            <BarItem Margin="Margin.Is1.FromStart">
                                <Button Clicked="DoPostponeReview" Loading="@isBusy" Border="Blazorise.Border.Dark" Outline="true">Postponer <Icon Name="IconName.Clock"></Icon></Button>
                            </BarItem>
                            <BarItem Margin="Margin.Is1.FromStart">
                                <Button Clicked="DoApproveReview" Loading="@isBusy" Border="Blazorise.Border.Success" Outline="true">Aprobar <Icon Name="IconName.Check"></Icon></Button>
                            </BarItem>
                        }
                    </BarEnd>
                </BarMenu>
            </Bar>
            
        }
    </ToolbarItems>
    <ChildContent>
        <SolicitudEncabezado Solicitud="_solicitud"/>
        <Tabs Margin="Margin.Is1.FromTop" @bind-SelectedTab="_selectedTab">
            <Items>
                <Tab Name="socio">Informaci贸n del Socio</Tab>
                <Tab Name="dependientes">
                    Dependientes
                    <Badge Color="Color.Primary" Pill>@_solicitud.Dependientes.Count</Badge>
                </Tab>
                <Tab Name="referencias">
                    Referencias
                    <Badge Color="Color.Primary" Pill>@_solicitud.ReferenciasBancarias.Count</Badge>
                </Tab>
                <Tab Name="embarcaciones">
                    Embarcaciones
                    <Badge Color="Color.Primary" Pill>@_solicitud.Embarcaciones.Count</Badge>
                </Tab>
                <Tab Name="secundadores">
                    Secundado Por
                    <Badge Color="Color.Primary" Pill>@_solicitud.SociosSecundadores.Count</Badge>
                </Tab>
                <Tab Name="otros">
                    Otras Membresias
                    <Badge Color="Color.Primary" Pill>@_solicitud.MembresiasAlternas.Count</Badge>
                </Tab>
                @if (_previas.Count > 0)
                {
                    <Tab Name="previas">
                        Previas
                        <Badge Color="Color.Warning" Pill>@_previas.Count</Badge>
                    </Tab>
                }
                @if (_solicitud.EstatusSolicitud != EstatusSolicitud.Recibida)
                {
                    <Tab Name="revisiones">
                        Revisiones
                        <Badge Color="Color.Warning" Pill>@_solicitud.Revisiones.Count</Badge>
                    </Tab>
                }
            </Items>
            <Content>
                <TabPanel Name="socio">
                    <SolicitudDatosSocio Solicitud="_solicitud"/>
                </TabPanel>
                <TabPanel Name="dependientes">
                    <SolicitudDependientes Solicitud="_solicitud"/>
                </TabPanel>
                <TabPanel Name="referencias">
                    <SolicitudReferencias Solicitud="_solicitud"/>
                </TabPanel>
                <TabPanel Name="embarcaciones">
                    <SolicitudEmbarcaciones Solicitud="_solicitud"/>
                </TabPanel>
                <TabPanel Name="secundadores">
                    <SolicitudSecundadores Solicitud="_solicitud"/>
                </TabPanel>
                <TabPanel Name="otros">
                    <SolicitudOtrasMembresias Solicitud="_solicitud"/>
                </TabPanel>
                 @if (_previas.Count > 0)
                {
                    <TabPanel Name="previas">
                        <SfGrid DataSource="_previas"
                                AdaptiveUIMode="AdaptiveMode.Both"
                                AllowFiltering="true"
                                AllowSorting="true"
                                AllowMultiSorting="true"
                                AllowGrouping="false"
                                AllowExcelExport="true"
                                AllowPdfExport="true"
                                AllowTextWrap="true"
                                ShowColumnChooser="false"
                                ShowColumnMenu="false"
                                AllowPaging="true">
                            <GridFilterSettings Type="FilterType.Excel" ShowFilterBarStatus="true" />
                            <GridSelectionSettings CheckboxOnly="true"></GridSelectionSettings>
                            <GridColumns>
                                <GridColumn Field="Id" Width="100px" HeaderText="No."/>
                                <GridColumn Field="FechaSolicitud" Width="120px" HeaderText="Fecha" Format="dd-MMM-yyyy"></GridColumn>
                                <GridColumn Field="SolicitudPara" HeaderText="Solicitante"/>
                                <GridColumn Field="Celular" Width="120px"></GridColumn>
                                <GridColumn Field="TipoSocio" Width="120px" HeaderText="Tipo"></GridColumn>
                                <GridColumn Field="EstatusSolicitud" Width="120px" HeaderText="Estatus"></GridColumn>
                                <GridColumn Field="UltimoSometimiento" Width="130px" HeaderText="Sometida" Format="dd-MMM-yyyy"></GridColumn>
                            </GridColumns>
                            <GridEvents TValue="Solicitud" OnRecordClick="DoShowDetail" ></GridEvents>
                        </SfGrid>
                    </TabPanel>
                }
                @if (_solicitud.EstatusSolicitud != EstatusSolicitud.Recibida)
                {
                    <TabPanel Name="revisiones">
                        <SolicitudRevisiones Solicitud="_solicitud"/>
                    </TabPanel>
                }
            </Content>
        </Tabs>
    </ChildContent>
</DetailContent>

<Modal @ref="_previousDialog" ShowBackdrop="true" RenderMode="ModalRenderMode.LazyReload">
    <ModalContent Size="ModalSize.Fullscreen">
        <ModalHeader>
            <CloseButton/>
        </ModalHeader>
        <ModalBody>
            <DetalleSolicitudPrevia SolicitudId = "@_previouseSolicitudId" />            
        </ModalBody>
    </ModalContent>
</Modal>


<SolicitudReviewResult @ref="_reviewDialog"></SolicitudReviewResult>


@code {

    SolicitudReviewResult _reviewDialog;

    Modal _pdfViewer;
    
    string _selectedTab = "socio";
    string _title = "Detalle Solicitud";
    
    [CascadingParameter] public AppState AppState { get; set; }
    [Parameter] public long SolicitudId { get; set; }
    Solicitud _solicitud;
    List<Solicitud> _previas = new();
    long _previouseSolicitudId = 0;

    private void DoShowDetail(RecordClickEventArgs<Solicitud> arg)
    {
        _previouseSolicitudId = arg.RowData.Id;
        StateHasChanged();
        _previousDialog.Show();
    }
    
    // private void DoShowPreviousDetail(Solicitud sol)
    // {
    //     NavigationManager.NavigateTo($"/DetalleSolicitud/{sol.Id}", true);
    // }
    
    private async Task DoLoadSolicitudAsync()
    {
        _solicitud = await ApiService.GetSolicitud(AppState.ClubKey, SolicitudId);
        if (!String.IsNullOrEmpty(_solicitud?.Beneficiario))
        {
            _previas = await ApiService.GetSolicitudesPrevias(AppState.ClubKey, _solicitud.NumeroIdentidad);
        }
        _title = $"Detalle Solicitud - {_solicitud.Id} - {_solicitud.EstatusSolicitud}";
        StateHasChanged();
    }

    private bool isBusy;
    private Modal _previousDialog;

    private async Task DoSubmitForReview()
    {
        if (isBusy) return;
        if ( !await MessageService.Confirm( "Seguro que desea someter esta solicitud para su evaluaci贸n?", "Confirme" ) )
        {
            return;
        }
        try
        {
            isBusy = true;
            _solicitud = await ApiService.SubmitSolicitud(AppState, SolicitudId);
            StateHasChanged();            
            await NotificationService.Success("La solicitud ha sido sometienda para revisi贸n", "Informaci贸n");
            NavigationManager.NavigateTo("/Solicitudes");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            await NotificationService.Error("Ha ocurrido un error sometiendo la solicitud para revisi贸n", "Alerta");
        }
        finally
        {
            isBusy = false;
        }
    }

    private async Task DoRejectReview()
    {
        if (isBusy) return;
        try
        {
            isBusy = true;

            var review =new Revision() {
                FechaRevision = DateTime.Today
            };

            await _reviewDialog.ShowAsync(_solicitud, ReviewForm.Reject, review, async (rev) =>
            {
                await ApiService.RejectReview(AppState, SolicitudId, rev);
                _solicitud = await ApiService.GetSolicitud(AppState.ClubKey, SolicitudId);
                StateHasChanged();            
                await NotificationService.Success("El rechazo de la solicutud fue grabado exitosamente.", "Informaci贸n");
                NavigationManager.NavigateTo("/Solicitudes");
            });
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            await NotificationService.Error("Ha ocurrido un error grabando el resultado de la revisi贸n", "Alerta");
        }
        finally
        {
            isBusy = false;
        }
    }
    private async Task DoPostponeReview()
    {
        if (isBusy) return;
        try
        {
            isBusy = true;

            var review =new Revision() {
                FechaRevision = DateTime.Today
            };
            
            await _reviewDialog.ShowAsync(_solicitud, ReviewForm.Postpone, review, async (rev) =>
            {
                await ApiService.PostponeReview(AppState, SolicitudId, rev);
                _solicitud = await ApiService.GetSolicitud(AppState.ClubKey, SolicitudId);
                StateHasChanged();            
                await NotificationService.Success("La posposici贸n de la solicutud fue grabada exitosamente.", "Informaci贸n");
                NavigationManager.NavigateTo("/Solicitudes");
            });
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            await NotificationService.Error("Ha ocurrido un error grabando el resultado de la revisi贸n", "Alerta");
        }
        finally
        {
            isBusy = false;
        }
    }
    private async Task DoApproveReview()
    {
        if (isBusy) return;
        try
        {
            isBusy = true;

            var review =new Revision() {
                FechaRevision = DateTime.Today
            };

            await _reviewDialog.ShowAsync(_solicitud, ReviewForm.Approve, review, async (rev) =>
            {
                await ApiService.ApproveReview(AppState, SolicitudId, rev);
                _solicitud = await ApiService.GetSolicitud(AppState.ClubKey, SolicitudId);
                StateHasChanged();            
                await NotificationService.Success("La aprobaci贸n de la solicutud fue grabada exitosamente y se ha creado la nueva membres铆a.", "Informaci贸n");
                NavigationManager.NavigateTo("/Socios");
            });
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            await NotificationService.Error("Ha ocurrido un error grabando el resultado de la revisi贸n", "Alerta");
        }
        finally
        {
            isBusy = false;
        }
    }

    private async Task DoOpenPdf()
    {
        string url = _solicitud.SolicitudPdfUrl;
        await jsRuntime.InvokeAsync<object>("open", url, "_blank");
    }

    private async Task DoSaveChanges()
    {
        if (isBusy) return;
        try
        {
            isBusy = true;

            await ApiService.UpdateSolicitud(AppState.ClubKey, _solicitud);
            NavigationManager.NavigateTo("/Solicitudes");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            await NotificationService.Error("Ha ocurrido un error grabando el resultado de la revisi贸n", "Alerta");
        }
        finally
        {
            isBusy = false;
        }
    }

    

}