@inject IApiService ApiService
@inject IMessageService MessageService
@inject INotificationService NotificationService

@if(Socio != null ) {
    <DataGrid TItem="DependienteSocio" Data="@Socio.Dependientes"
              CommandMode="DataGridCommandMode.ButtonRow"
              Filterable="false"
              FilterMethod="DataGridFilterMethod.Contains"
              ShowPager="true"
              ShowPageSizes="false"
              RowClicked="DependienteClicked"
              PageSize="10"
              RowSelectable="(r) => false">
        <DataGridColumns>
            <DataGridColumn Field="Id" Caption="Id" SortDirection="Blazorise.SortDirection.Ascending"/>
            <DataGridColumn Field="NumeroCarnet" Caption="Carnet No."/>
            <DataGridColumn Field="TipoDependiente" Caption="Tipo"/>
            <DataGridColumn Field="Nombre" Caption="Nombre"/>
            <DataGridColumn Field="NumeroIdentidad" Caption="Identidad"/>
            <DataGridColumn Field="Estatus" Caption="Estatus"/>
        </DataGridColumns>
        <ButtonRowTemplate>
            <Button Color="Color.Primary" Margin="Margin.Is1.FromTop" Border="Blazorise.Border.RoundedCircle" Outline="false" Clicked="DoShowAdd">
                <Icon Name="IconName.Add" TextColor="TextColor.White"/>
            </Button>
        </ButtonRowTemplate>
    </DataGrid>
}
else
{
    <EmptyView/>
}

<Modal @ref="editDialog">
    <ModalContent Size="ModalSize.ExtraLarge" Centered>
        <ModalHeader>
            <ModalTitle>@(isCreating ? "Nuevo Dependiente" : "Editando Dependiente")</ModalTitle>
            <CloseButton Clicked="DoRevertEdit"/>
        </ModalHeader>
        <ModalBody>
            <Validations @ref="editValidator" Mode="ValidationMode.Manual">
                <Row>
                    <Column ColumnSize="ColumnSize.Is2">
                        <FigureImage Style="height: 100px;width: 100px" Source="@(String.IsNullOrEmpty(_editRow.FotoUrl) ? "/nophoto.jpg" : _editRow.FotoUrl)"/>
                    </Column>
                    <Column ColumnSize="ColumnSize.Is10">
                        <Fields Margin="Margin.Is1.FromTop">
                            <Field Horizontal ColumnSize="ColumnSize.Is8">
                                <FieldLabel ColumnSize="ColumnSize.Is3">Tipo Dependiente</FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.Is9">
                                    <RadioGroup Disabled="@_isReadOnly" TValue="TipoDependiente" @bind-CheckedValue="_editRow.TipoDependiente" Inline="true">
                                        <Radio Disabled="@_isReadOnly" Readonly="@_isReadOnly" Value="@(TipoDependiente.Conyuge)">Conyuge</Radio>
                                        <Radio Disabled="@_isReadOnly" Value="@(TipoDependiente.Hijo)">Hijo(a)</Radio>
                                    </RadioGroup>
                                </FieldBody>
                            </Field>
                            <Field Horizontal ColumnSize="ColumnSize.Is4">
                                <FieldBody>
                                    @if (_editRow.Estatus == EstatusMovimiento.Aprobado)
                                    {
                                        <Heading TextAlignment="TextAlignment.End" TextWeight="TextWeight.Default" Size="HeadingSize.Is5" TextColor="TextColor.Success">@_editRow.Estatus</Heading>
                                    }
                                    else if (_editRow.Estatus == EstatusMovimiento.Pendiente)
                                    {
                                        <Heading TextAlignment="TextAlignment.End" TextWeight="TextWeight.Default" Size="HeadingSize.Is5" TextColor="TextColor.Black50">@_editRow.Estatus</Heading>
                                    }
                                    else
                                    {
                                        <Heading TextAlignment="TextAlignment.End" TextWeight="TextWeight.Default" Size="HeadingSize.Is5" TextColor="TextColor.Danger">@_editRow.Estatus</Heading>
                                    }
                                </FieldBody>
                            </Field>
                            <Field Horizontal ColumnSize="ColumnSize.Is12">
                                <FieldLabel ColumnSize="ColumnSize.Is3">Nombre</FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.Is9">
                                    <TextEdit Readonly="@_isReadOnly" @bind-Text="_editRow.Nombre"></TextEdit>
                                </FieldBody>
                            </Field>
                            <Field Horizontal ColumnSize="ColumnSize.Is12">
                                <FieldLabel ColumnSize="ColumnSize.Is3">Cédula / Pasaporte</FieldLabel>
                                <FieldBody ColumnSize="ColumnSize.Is9">
                                    <TextEdit Readonly="@_isReadOnly" @bind-Text="_editRow.NumeroIdentidad"></TextEdit>
                                </FieldBody>
                            </Field>
                        </Fields>
                    </Column>
                </Row>
                <Row>
                    <Fields Margin="Margin.Is1.FromTop">
                        <Field Horizontal ColumnSize="ColumnSize.Is4">
                            <FieldLabel ColumnSize="ColumnSize.Is5">Nacimiento</FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.Is7">
                                <DatePicker Readonly="@_isReadOnly" DisplayFormat="dd-MMM-yyyy" @bind-Date="_editRow.FechaNacimiento"/>
                            </FieldBody>
                        </Field>
                        <Field Horizontal ColumnSize="ColumnSize.Is3">
                            <FieldLabel ColumnSize="ColumnSize.Is4">Edad</FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.Is8">
                                <NumericEdit Readonly="@_isReadOnly" Value="_editRow.Edad"/>
                            </FieldBody>
                        </Field>

                        <Field Horizontal ColumnSize="ColumnSize.Is5">
                            <FieldLabel ColumnSize="ColumnSize.Is4">Nacionalidad</FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.Is8">
                                <TextEdit Readonly="@_isReadOnly" @bind-Text="_editRow.Nacionalidad"/>
                            </FieldBody>
                        </Field>
                    </Fields>
                </Row>
                <Fields Margin="Margin.Is1.FromTop">
                    <Field Horizontal ColumnSize="ColumnSize.Is4">
                        <FieldLabel ColumnSize="ColumnSize.Is4">Sexo</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is8">
                            <RadioGroup Disabled="@_isReadOnly" TValue="Sexo" @bind-CheckedValue="_editRow.Sexo" Inline="true">
                                <Radio Disabled="@_isReadOnly" Readonly="@_isReadOnly" Value="@(Sexo.Masculino)">M</Radio>
                                <Radio Disabled="@_isReadOnly" Value="@(Sexo.Femenino)">F</Radio>
                            </RadioGroup>
                        </FieldBody>
                    </Field>

                    <Field Horizontal ColumnSize="ColumnSize.Is4">
                        <FieldLabel ColumnSize="ColumnSize.Is3">Celular</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is9">
                            <TextEdit Readonly="@_isReadOnly" @bind-Text="_editRow.Celular"/>
                        </FieldBody>
                    </Field>
                    <Field Horizontal ColumnSize="ColumnSize.Is4">
                        <FieldLabel ColumnSize="ColumnSize.Is3">Email</FieldLabel>
                        <FieldBody ColumnSize="ColumnSize.Is9">
                            <TextEdit Readonly="@_isReadOnly" @bind-Text="_editRow.Email"/>
                        </FieldBody>
                    </Field>
                </Fields>
                @if (_editRow.TipoDependiente == TipoDependiente.Conyuge)
                {
                    <Divider DividerType="DividerType.TextContent" Text="Información Laboral"/>
                    <Fields Margin="Margin.Is1.FromTop">
                        <Field Horizontal ColumnSize="ColumnSize.Is7">
                            <FieldLabel ColumnSize="ColumnSize.Is3">Lugar de Trabajo</FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.Is9"><TextEdit Readonly="@_isReadOnly" @bind-Text="_editRow.LugarTrabajo"/></FieldBody>
                        </Field>
                        <Field Horizontal ColumnSize="ColumnSize.Is5">
                            <FieldLabel ColumnSize="ColumnSize.Is3">Cargo</FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.Is9"><TextEdit Readonly="@_isReadOnly" @bind-Text="_editRow.Posicion"/></FieldBody>
                        </Field>
                    </Fields>
                    <Fields Margin="Margin.Is1.FromTop">
                        <Field Horizontal ColumnSize="ColumnSize.Is8">
                            <FieldLabel ColumnSize="ColumnSize.Is3">Dirección Of.</FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.Is9"><TextEdit Readonly="@_isReadOnly" @bind-Text="_editRow.DireccionTrabajo"/></FieldBody>
                        </Field>
                        <Field Horizontal ColumnSize="ColumnSize.Is4">
                            <FieldLabel ColumnSize="ColumnSize.Is5">Teléfono Of.</FieldLabel>
                            <FieldBody ColumnSize="ColumnSize.Is7"><TextEdit Readonly="@_isReadOnly" @bind-Text="_editRow.TelefonoTrabajo"/></FieldBody>
                        </Field>
                    </Fields>
                }
            </Validations>
        </ModalBody>
        <ModalFooter >
            @if (!isCreating)
            {
                @if (_editRow.Estatus == EstatusMovimiento.Pendiente)
                {
                    <Button Float="Float.Start" Outline="true" TextColor="TextColor.Danger" Loading="@_isBusy" Clicked="@DoDelete">Borrar Registro</Button>
                } else if (_editRow.Estatus == EstatusMovimiento.Aprobado)
                {
                    <Button Float="Float.Start" Outline="true" TextColor="TextColor.Danger" Loading="@_isBusy" Clicked="@DoCancelDependiente">Cancelar Carnet</Button>
                }
            }
            <Button Float="Float.End" Color="Color.Primary" Loading="@_isBusy" Clicked="@DoSaveEdit">Guardar Cambios</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code {
    Modal editDialog;
    bool isCreating;
    bool _isBusy;
    bool _isReadOnly;
    Validations editValidator;
    
    DependienteSocio _editRow = new();
    
    Task DoRevertEdit()
    {
        editDialog.Hide();
        return Task.CompletedTask;
    }
    
    [CascadingParameter] public AppState AppState { get; set; }
    [Parameter] public Action<Socio> OnSocioChanged { get; set; }
    [Parameter]
    public Socio Socio { get; set; }
    
    protected override void OnParametersSet()
    {
        StateHasChanged();
        base.OnParametersSet();
    }
    
    private void DoShowAdd()
    {
        _isReadOnly = false;
        isCreating = true;
        _editRow = new DependienteSocio() { FechaNacimiento = DateTime.Today};
        editDialog.Show();
    }

    private async Task DoCancelDependiente()
    {
        editDialog.Hide();
        if (await MessageService.Confirm("Seguro que desea solicitar la cancelación de este carnet?", "Confirme"))
        {
            Socio = await ApiService.DeActivateSocioDependiente(AppState, Socio.Id, _editRow);
            StateHasChanged();
            OnSocioChanged?.Invoke(Socio);
        }
    }
    private async Task DependienteClicked(DataGridRowMouseEventArgs<DependienteSocio> arg)
    {
        _editRow = arg.Item with {};
        // if (_editRow.Estatus == EstatusMovimiento.Aprobado)
        // {
        //     if (await MessageService.Confirm("Este registro esta 'Aprobado', desea solicitar la cancelación de esta aprobación?", "Confirme"))
        //     {
        //         Socio = await ApiService.DeActivateSocioDependiente(AppState, Socio.Id, _editRow);
        //         StateHasChanged();
        //         OnSocioChanged?.Invoke(Socio);
        //     }
        // } else 
        if (_editRow.Estatus == EstatusMovimiento.Rechazado)
        {
            if (await MessageService.Confirm("Este registro esta 'Rechazado', desea someter el regitro nuevamente para  aprobación?", "Confirme"))
            {
                Socio = await ApiService.ReActivateSocioDependiente(AppState, Socio.Id, _editRow);
                StateHasChanged();
                OnSocioChanged?.Invoke(Socio);
            }
        }
        else
        {
            _isReadOnly = (_editRow.Estatus != EstatusMovimiento.Pendiente);
            isCreating = false;
            await editDialog.Show();
        }  
    }
    
    async Task DoSaveEdit()
    {
        if (_isBusy) return;
        
        if (!await editValidator.ValidateAll())
        {
            return;
        }

        await editValidator.ClearAll();
        
        try
        {
            _isBusy = true;
            Socio = await ApiService.UpsertSocioDependiente(AppState, Socio.Id, _editRow);
            StateHasChanged();
            OnSocioChanged?.Invoke(Socio);
            editDialog.Hide();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            NotificationService.Error("Ha ocurrido un error actualizando registro, favor revisar e intentar nuevamente.", "Alerta");
        }
        finally
        {
            _isBusy = false;
        }
        
        
    }
    
    async Task DoDelete()
    {
        editDialog.Hide();
        if ( !await MessageService.Confirm( "Seguro que desea borrar esta persona dependiente de este socio?", "Confirme" ) )
        {
            return;
        }
        
        try
        {
            _isBusy = true;
            Socio = await ApiService.DeActivateSocioDependiente(AppState, Socio.Id, _editRow);
            StateHasChanged();
            OnSocioChanged?.Invoke(Socio);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            NotificationService.Error("Ha ocurrido un error borrando registro, favor revisar e intentar nuevamente.", "Alerta");
        }
        finally
        {
            _isBusy = false;
        }
        
    }
    
}